buildscript {
	repositories {
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		mavenCentral()
	}
	dependencies {
		classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
	}
}

plugins {
	id 'idea'
	id("com.diffplug.spotless") version "7.0.4"
	id "io.freefair.lombok" version "8.12.2.1"
	id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
	id 'org.spongepowered.mixin' version '0.7.+'
	id 'jacoco'
	id 'com.gradleup.shadow' version '8.3.0'
}

apply plugin: 'org.spongepowered.mixin'

jacoco {
	toolVersion = "0.8.11" // or latest
}

jacocoTestReport {
	reports {
		xml.required = true
		html.required = true
	}
}

configurations {
	shadeOnly
	implementation.extendsFrom(shadeOnly)
}

group = mod_group_id
version = mod_version

base {
	archivesName = mod_id
}

java {
	toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
	mappings channel: mapping_channel, version: mapping_version

	copyIdeResources = true


	// Access Transformer
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

	runs {
		configureEach {
			workingDirectory project.file('run')


			property 'forge.logging.markers', 'REGISTRIES'


			property 'forge.logging.console.level', 'debug'

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}

		build {
			jvmArg("-Xlint:deprecation")
		}

		client {

			property 'forge.enabledGameTestNamespaces', mod_id
			workingDirectory project.file('run')
			jvmArg "-XX:+AllowEnhancedClassRedefinition"
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', 'tts'
			mods {
				tts {
					source sourceSets.main
				}
			}
		}

		server {
			property 'forge.enabledGameTestNamespaces', mod_id
			args '--nogui'
		}


		gameTestServer {
			property 'forge.enabledGameTestNamespaces', mod_id
		}

		data {

			workingDirectory project.file('run-data')

			args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
		}
	}
}

mixin {
	add sourceSets.main, "${mod_id}.refmap.json"

	config "${mod_id}.mixins.json"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {

	maven { url "https://cursemaven.com" }

	// If you have mod jar dependencies in ./libs, you can declare them as a repository like so.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html#sub:flat_dir_resolver
	// flatDir {
	//     dir 'libs'
	// }

	maven {
		url = "https://repo.maven.apache.org/maven2/"
	}


	maven {
		// maven that hosts JEI files
		name = "Jared's maven"
		url = "https://maven.blamejared.com/"
	}
}

dependencies {

	// Minecraft
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

	// Building Gadgets
	implementation fg.deobf("curse.maven:building-gadgets-298187:5144161")

	// Worldedit
	implementation fg.deobf("curse.maven:worldedit-225608:4586218")

	// Patchouli
	implementation fg.deobf("curse.maven:patchouli-306770:4966125")

	// JEI API (not include in runtime)
	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"))
	compileOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"))

	// JEI (includes in runtime)
	runtimeOnly(fg.deobf("mezz.jei:jei-${minecraft_version}-forge:${jei_version}"))

	implementation 'org.openjdk.nashorn:nashorn-core:15.4'

	// Terrablender
	implementation fg.deobf("com.github.glitchfiend:TerraBlender-forge:${minecraft_version}-${terrablender_version}")

	// GeckoLib
//    implementation fg.deobf("software.bernie.geckolib:geckolib-forge-${minecraft_version}:${geckolib_version}")
//    implementation("com.eliotlash.mclib:mclib:20")

	// LomBok
	compileOnly 'org.projectlombok:lombok:1.18.32'
	annotationProcessor 'org.projectlombok:lombok:1.18.32'

	// Mixin
	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

shadowJar {
	configurations = [project.configurations.shadeOnly]
	from(sourceSets.main.output)
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from(sourceSets.main.resources.srcDirs) {
		exclude 'META-INF/mods.toml'  // exclude extra copies
	}

	// Relocate TerraBlender package
	relocate 'terrablender', 'com.code.tama.shadow.terrablender'

	archiveClassifier.set('') // No -all

	// Step 1: Exclude all foreign mods.toml (from shaded deps)
	doFirst {
		def ownModsTomlFile = file('src/main/resources/META-INF/mods.toml')
		if (!ownModsTomlFile.exists()) {
			println "Warning: Your own mods.toml not found at ${ownModsTomlFile.absolutePath}"
		}
		def ownModsToml = ownModsTomlFile.exists() ? ownModsTomlFile.absolutePath : null

		project.configurations.shadeOnly.resolvedConfiguration.resolvedArtifacts.each { artifact ->
			def jarFile = artifact.file
			if (jarFile.name.endsWith(".jar")) {
				zipTree(jarFile).matching {
					include 'META-INF/mods.toml'
				}.files.each { f ->
					if (ownModsToml == null || !f.absolutePath.equalsIgnoreCase(ownModsToml)) {
						exclude { fileTreeElement ->
							fileTreeElement.file?.absolutePath == f?.absolutePath
						}
					}
				}
			}
		}
	}


	// Step 2: Re-include your own mods.toml from resources
	from('src/main/resources') {
		include 'META-INF/mods.toml'
		include 'META-INF/**'
	}
}

tasks.named('processResources', ProcessResources).configure {
	var replaceProperties = [
			minecraft_version      : minecraft_version,
			minecraft_version_range: minecraft_version_range,
			forge_version          : forge_version,
			forge_version_range    : forge_version_range,
			loader_version_range   : loader_version_range,
			mod_id                 : mod_id,
			mod_name               : mod_name,
			mod_license            : mod_license,
			mod_version            : mod_version,
			mod_authors            : mod_authors,
			mod_description        : mod_description
	]

	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties + [project: project]
	}
}

tasks.named('jar', Jar).configure {
	manifest {
		attributes(["Specification-Title"     : mod_id,
					"Specification-Vendor"    : mod_authors,
					"Specification-Version"   : "1", // We are version 1 of ourselves
					"Implementation-Title"    : project.name,
					"Implementation-Version"  : project.jar.archiveVersion,
					"Implementation-Vendor"   : mod_authors,
					"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")])
	}

	// This is the preferred method to reobfuscate your jar file
	finalizedBy 'reobfJar'
}
tasks.withType(ProcessResources).configureEach {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}

spotless {
	json {
		target 'src/**/*.json'
		jackson()
				.feature('INDENT_OUTPUT', true)                // optional: true by default
				.feature('ORDER_MAP_ENTRIES_BY_KEYS', true)    // optional: false by default
	}
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '.gitattributes', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		leadingSpacesToTabs() // or leadingTabsToSpaces. Takes an integer argument if you don't like 4
//		endWithNewline()
	}
	java {
		removeUnusedImports()
//		cleanthat()

		importOrder('java', 'javax', '', 'net.minecraft', "com.code.tama.triggerapi", group)

		trimTrailingWhitespace()

		palantirJavaFormat()
		// make sure every file has the following copyright header.
		// optionally, Spotless can set copyright years by digging
		// through git history (see "license" section)
		licenseHeader '/* (C) TAMA Studios $YEAR */'
	}
}
